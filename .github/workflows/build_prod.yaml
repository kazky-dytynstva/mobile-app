name: Build PROD

on:
  push:
    tags:
      - '*'
  workflow_dispatch:
    inputs:
      android_prod:
        description: 'ü§ñ android PROD'
        required: false
        default: false
        type: boolean
      ios_prod:
        description: ' üçè ios PROD'
        required: false
        default: false
        type: boolean
      store_artifacts:
        description: 'Store builds to artifacts'
        required: false
        default: false
        type: boolean

concurrency:
  group: ${{ github.workflow }}-${{  github.head_ref || github.run_id }}
  cancel-in-progress: true

env:
  FASTLANE_SKIP_UPDATE_CHECK: '1'
  JAVA_VERSION: '11'

jobs:

  prepare_code:
    name: üèó Prepare code
    uses: ./.github/workflows/prepare_build_code.yaml
    with:
      VERSION_CODE_OFFSET: 250

  build_ios_prod:
    name: üçè Build ios Prod
    needs: prepare_code
    outputs:
      message: ${{ env.SLACK_MESSAGE }}
      status: ${{ env.SLACK_STATUS }}
    if: (github.event_name == 'push' && contains(github.ref, 'refs/tags/')) || (github.event_name == 'workflow_dispatch' && github.event.inputs.ios_prod  == 'true')
    runs-on: macos-latest

    steps:
      - name: ‚öôÔ∏è Install Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ needs.prepare_code.outputs.flutter_version }}
          cache: true

      - name: ‚è¨ Checkout repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: üî¢ Select Xcode version
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable

      - name: üçè Build ios Prod
        working-directory: ./application
        env:
          IOS_PROVISIONING_PASSWORD: ${{ secrets.IOS_PROVISIONING_PASSWORD }}
          APPSTORE_API_KEY_ID: ${{ secrets.APPSTORE_API_KEY_ID }}
          APPSTORE_ISSUER_ID: ${{ secrets.APPSTORE_ISSUER_ID }}
          APPSTORE_API_PRIVATE_KEY: ${{ secrets.APPSTORE_API_PRIVATE_KEY }}
          IOS_PROFILES: ${{ secrets.IOS_PROFILES }}
          GOOGLE_SERVICES_PLIST_PROD: ${{ secrets.GOOGLE_SERVICES_PLIST_PROD }}
        run: fastlane build clean:true platform:ios staging:prod upload_to_store:true version_code:${{ needs.prepare_code.outputs.build_version_code }}

      - name: ‚§µÔ∏è Archive artifacts
        uses: actions/upload-artifact@v3
        if: (github.event_name == 'workflow_dispatch' && github.event.inputs.store_artifacts  == 'true')
        with:
          name: ios_artifacts_${{ needs.prepare_code.outputs.build_version_code }}
          path: application/build/ios/ipa/
          if-no-files-found: error

      - name: ‚úçÔ∏èüìù Prepare report for Slack
        if: always()
        run: |
          if ${{ job.status == 'success' }}; then
            MESSAGE=$( cat application/build_report.log )
            STATUS="success"
          elif ${{ job.status == 'cancelled' }}; then
            MESSAGE="\"iOS build job (${{ needs.prepare_code.outputs.build_version_code }}) cancelled ü§î\""
            STATUS="canceled"
          else
            MESSAGE="\"iOS build job (${{ needs.prepare_code.outputs.build_version_code }}) failed üôà\""
            STATUS="failure"
          fi

          echo "SLACK_STATUS=$STATUS" >> $GITHUB_ENV
          echo "SLACK_MESSAGE=$MESSAGE" >> $GITHUB_ENV


  build_android_prod:
    name: ü§ñ Build Android Prod
    needs: prepare_code
    outputs:
      message: ${{ env.SLACK_MESSAGE }}
      status: ${{ env.SLACK_STATUS }}
    if: (github.event_name == 'push' && contains(github.ref, 'refs/tags/')) || (github.event_name == 'workflow_dispatch' && github.event.inputs.android_prod  == 'true')
    runs-on: macos-latest
    steps:

      - name: ‚öôÔ∏è Install Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ needs.prepare_code.outputs.flutter_version }}
          cache: true

      - name: ‚è¨ Checkout repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: ‚òïÔ∏è Install Java
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: ${{ env.JAVA_VERSION }}

      - name: üèóü§ñ Build APPBUNDLE version
        working-directory: ./application
        env:
          ANDROID_KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
          ANDROID_KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}
          ANDROID_STORE_PASSWORD: ${{ secrets.ANDROID_STORE_PASSWORD }}
          ANDROID_KEYSTORE_FILE: ${{ secrets.ANDROID_KEYSTORE_FILE }}
          GOOGLE_SERVICES_JSON_PROD: ${{ secrets.GOOGLE_SERVICES_JSON_PROD }}
          GOOGLE_APP_CREDENTIALS_JSON_PROD: ${{ secrets.GOOGLE_APP_CREDENTIALS_JSON_PROD }}
        run: fastlane build clean:true platform:android staging:prod android_output:appbundle upload_to_store:true version_code:${{ needs.prepare_code.outputs.build_version_code }}

      - name: ‚§µÔ∏è Archive artifacts
        uses: actions/upload-artifact@v3
        if: (github.event_name == 'workflow_dispatch' && github.event.inputs.store_artifacts  == 'true')
        with:
          name: android_artifacts_${{ needs.prepare_code.outputs.build_version_code }}
          path: application/build/app/outputs/
          if-no-files-found: error

      - name: ‚úçÔ∏èüìù Prepare report for Slack
        if: always()
        run: |
          if ${{ job.status == 'success' }}; then
            MESSAGE=$( cat application/build_report.log )
            STATUS="success"
          elif ${{ job.status == 'cancelled' }}; then
            MESSAGE="\"Android build job (${{ needs.prepare_code.outputs.build_version_code }}) cancelled ü§î\""
            STATUS="canceled"
          else
            MESSAGE="\"Android build job (${{ needs.prepare_code.outputs.build_version_code }}) failed üôà\""
            STATUS="failure"
          fi

          echo "SLACK_STATUS=$STATUS" >> $GITHUB_ENV
          echo "SLACK_MESSAGE=$MESSAGE" >> $GITHUB_ENV


  ###### SLACK NOTIFICATIONS #######

  slack_notification_ios_prod:
    name: üîî Send üçè report to Slack
    needs: build_ios_prod
    if: always() && (needs.build_ios_prod.result != 'skipped')
    uses: ./.github/workflows/slack_notification.yaml
    secrets:
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL_BUILDS_PROD }}
    with:
      message: ${{ needs.build_ios_prod.outputs.message }}
      status: ${{ needs.build_ios_prod.outputs.status }}

  slack_notification_android_prod:
    name: üîî Send ü§ñ report to Slack
    needs: build_android_prod
    if: always() && (needs.build_android_prod.result != 'skipped')
    uses: ./.github/workflows/slack_notification.yaml
    secrets:
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL_BUILDS_PROD }}
    with:
      message: ${{ needs.build_android_prod.outputs.message }}
      status: ${{ needs.build_android_prod.outputs.status }}

